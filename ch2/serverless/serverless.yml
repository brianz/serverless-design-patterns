service: coffee-cupping

provider:
  name: aws
  runtime: python3.6
  memorySize: 128
  region: ${env:AWS_REGION}
  timeout: 5
  environment:
    CUPPING_DB_USERNAME: ${env:CUPPING_DB_USERNAME}
    CUPPING_DB_PASSWORD: ${env:CUPPING_DB_PASSWORD}
    CUPPING_DB_NAME: ${env:CUPPING_DB_NAME}
    CUPPING_DB_HOST:
      Fn::GetAtt:
        - RDSPostgresInstance
        - Endpoint.Address
  vpc:
    securityGroupIds:
      - Fn::GetAtt: ServerlessSecurityGroup.GroupId
    subnetIds:
      - ${env:SUBNET_ID_A}
      - ${env:SUBNET_ID_B}
      - ${env:SUBNET_ID_C}
  iamRoleStatements:
    # Allow the lambda function permission to create EINs, which is part of the
    # AWSLambdaVPCAccessExecutionRole
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"

# you can add packaging information here
package:
  exclude:
    - .git/**
    - __pycache__/**
    - "**/__pycache__/**"
    - "*.pyc"
    - "*.swp"


resources:
  Resources:
    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: ${env:VPC_ID}
    RDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for RDS Instance
        VpcId: ${env:VPC_ID}
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
        # You can put in the security group of one of your EC2 intances
        # here, which allows inbound access into the RDS instance from the EC2
        # instance. This provides you the security of keeping your RDS instance
        # inaccessible from the public internet.
        # - IpProtocol: tcp
        #   FromPort: '5432'
        #   ToPort: '5432'
        #   SourceSecurityGroupId: sg-c7dfdcbe
    RDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: RDS Subnet Group
        SubnetIds:
          - ${env:SUBNET_ID_A}
          - ${env:SUBNET_ID_B}
          - ${env:SUBNET_ID_C}
    RDSPostgresInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 100
        AutoMinorVersionUpgrade: true
        AvailabilityZone: ${self:provider.region}a
        DBInstanceClass: db.t2.micro
        DBName: ${env:CUPPING_DB_NAME}
        DBSubnetGroupName:
          Ref: RDSSubnetGroup
        Engine: postgres
        EngineVersion: 9.6.2
        MasterUsername: ${env:CUPPING_DB_USERNAME}
        MasterUserPassword: ${env:CUPPING_DB_PASSWORD}
        PubliclyAccessible: false
        VPCSecurityGroups:
          - Fn::GetAtt: RDSSecurityGroup.GroupId


functions:
  HandleSession:
    handler: handler.session
    events:
      - http:
          path: session
          method: get
          cors: true
      - http:
          path: session
          method: post
          cors: true
  HandleSessionDetail:
    handler: handler.session_detail
    events:
      - http:
          path: session/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
      - http:
          path: session/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
